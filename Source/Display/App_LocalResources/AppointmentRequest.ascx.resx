<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddEventSuccess.Text" xml:space="preserve">
    <value>Your event request has been successfully submitted!</value>
  </data>
  <data name="AddNewEvent.Text" xml:space="preserve">
    <value>Add a New Event</value>
  </data>
  <data name="AddressLabel.Text" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AllowRegistrationsLabel.Text" xml:space="preserve">
    <value>Allow Event Registrations</value>
  </data>
  <data name="AltPhoneLabel.Text" xml:space="preserve">
    <value>Alternate Phone</value>
  </data>
  <data name="AppointmentRequestLabel.Text" xml:space="preserve">
    <value>Service Request Form</value>
  </data>
  <data name="AssignmentDateLabel.Text" xml:space="preserve">
    <value>Date of Assignment</value>
  </data>
  <data name="Business.Text" xml:space="preserve">
    <value>Business</value>
  </data>
  <data name="Cancel.Alt" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="CancelGoHomeLink.Alt" xml:space="preserve">
    <value>Cancel &amp; Go Home</value>
  </data>
  <data name="CapacityMetMessageLabel.Text" xml:space="preserve">
    <value>When Registration Cap Is Met, Show a</value>
  </data>
  <data name="CityLabel.Text" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Community Event.Text" xml:space="preserve">
    <value>Community Event</value>
  </data>
  <data name="ConsiderationsLabel.Text" xml:space="preserve">
    <value>Special Considerations</value>
  </data>
  <data name="CreateAnother.Alt" xml:space="preserve">
    <value>Create Another Event</value>
  </data>
  <data name="CustomCapacityMetMessageLabel.Text" xml:space="preserve">
    <value>Custom Message to Display When The Registation Cap Is Met</value>
  </data>
  <data name="CustomField10Label.Text" xml:space="preserve">
    <value>Custom Field 10</value>
  </data>
  <data name="CustomField1Label.Text" xml:space="preserve">
    <value>Custom Field 1</value>
  </data>
  <data name="CustomField2Label.Text" xml:space="preserve">
    <value>Custom Field 2</value>
  </data>
  <data name="CustomField3Label.Text" xml:space="preserve">
    <value>Custom Field 3</value>
  </data>
  <data name="CustomField4Label.Text" xml:space="preserve">
    <value>Custom Field 4</value>
  </data>
  <data name="CustomField5Label.Text" xml:space="preserve">
    <value>Custom Field 5</value>
  </data>
  <data name="CustomField6Label.Text" xml:space="preserve">
    <value>Custom Field 6</value>
  </data>
  <data name="CustomField7Label.Text" xml:space="preserve">
    <value>Custom Field 7</value>
  </data>
  <data name="CustomField8Label.Text" xml:space="preserve">
    <value>Custom Field 8</value>
  </data>
  <data name="CustomField9Label.Text" xml:space="preserve">
    <value>Custom Field 9</value>
  </data>
  <data name="CustomFieldsLabel.Text" xml:space="preserve">
    <value>Custom Fields</value>
  </data>
  <data name="CustomMessage.Text" xml:space="preserve">
    <value>Custom Message</value>
  </data>
  <data name="DefaultEmptyText.Text" xml:space="preserve">
    <value>&lt;p&gt;&amp;#160;&lt;/p&gt;</value>
  </data>
  <data name="DefaultMessage.Text" xml:space="preserve">
    <value>Default Message</value>
  </data>
  <data name="DescriptionLabel.Text" xml:space="preserve">
    <value>Description of Event</value>
  </data>
  <data name="EditEvent.Text" xml:space="preserve">
    <value>Edit an Event</value>
  </data>
  <data name="EditEventSuccess.Text" xml:space="preserve">
    <value>Your event has been successfully updated!</value>
  </data>
  <data name="Educational.Text" xml:space="preserve">
    <value>Educational</value>
  </data>
  <data name="EndDateCompareValidator.Text" xml:space="preserve">
    <value>Your event cannot end before it begins</value>
  </data>
  <data name="EndDateTimePickerRequired.Text" xml:space="preserve">
    <value>You must specify when your event ends</value>
  </data>
  <data name="EndLabel.Text" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="EventDescriptionLabel.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="EventDescriptionTextEditorRequired.Text" xml:space="preserve">
    <value>You must supply a description of your event</value>
  </data>
  <data name="EventEndDateLabel.Text" xml:space="preserve">
    <value>Ends</value>
  </data>
  <data name="EventLocationLabel.Text" xml:space="preserve">
    <value>Where</value>
  </data>
  <data name="EventLocationTextBoxRequired.Text" xml:space="preserve">
    <value>You must supply where your event is taking place</value>
  </data>
  <data name="EventLocationWaterMark.Text" xml:space="preserve">
    <value>Please enter the event location</value>
  </data>
  <data name="EventOverviewLabel.Text" xml:space="preserve">
    <value>Overview</value>
  </data>
  <data name="EventStartDateLabel.Text" xml:space="preserve">
    <value>Begins</value>
  </data>
  <data name="EventTimeZoneCheckBox.Text" xml:space="preserve">
    <value>This event occurs during &lt;a href="http://aa.usno.navy.mil/faq/docs/daylight_time.php" target="_blank"&gt;Daylight Saving Time&lt;/a&gt;</value>
  </data>
  <data name="EventTimeZoneLabel.Text" xml:space="preserve">
    <value>Time Zone</value>
  </data>
  <data name="EventTitleLabel.Text" xml:space="preserve">
    <value>Event Title</value>
  </data>
  <data name="EventTitleRangeValidator.Text" xml:space="preserve">
    <value>The event title must be no longer than 250 characters</value>
  </data>
  <data name="EventTitleTextBoxRequired.Text" xml:space="preserve">
    <value>You must supply a title for your event</value>
  </data>
  <data name="EventTitleWaterMark.Text" xml:space="preserve">
    <value>Please enter the event title</value>
  </data>
  <data name="EventTypeLabel.Text" xml:space="preserve">
    <value>Type of Event</value>
  </data>
  <data name="FeaturedEventLabel.Text" xml:space="preserve">
    <value>Featured Event</value>
  </data>
  <data name="Fed or State Govt.Text" xml:space="preserve">
    <value>Federal or State Government</value>
  </data>
  <data name="GenderLabel.Text" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="InstructionsLabel.Text" xml:space="preserve">
    <value>Special Instructions</value>
  </data>
  <data name="Interpreting Event.Text" xml:space="preserve">
    <value>Interpreting Event</value>
  </data>
  <data name="InterpretingServicesLabel.Text" xml:space="preserve">
    <value>Person Requesting Interpreting Services</value>
  </data>
  <data name="InvalidRecurrence.Text" xml:space="preserve">
    <value>The selected recurrence pattern is invalid.  Please make sure all fields are filled in correctly.</value>
  </data>
  <data name="LimitRegistrationsLabel.Text" xml:space="preserve">
    <value>Set a Registration Cap</value>
  </data>
  <data name="Local Govt.Text" xml:space="preserve">
    <value>Local Government</value>
  </data>
  <data name="Medical.Text" xml:space="preserve">
    <value>Medical</value>
  </data>
  <data name="Musical.Text" xml:space="preserve">
    <value>Musical</value>
  </data>
  <data name="NearestLabel.Text" xml:space="preserve">
    <value>If DC/MD/VA, nearest Metro and nearest cross street</value>
  </data>
  <data name="NumberSpecialLabel.Text" xml:space="preserve">
    <value>Number of Deaf Participants</value>
  </data>
  <data name="OnSiteContactLabel.Text" xml:space="preserve">
    <value>On-site Contact</value>
  </data>
  <data name="Other.Text" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="ParticipantsLabel.Text" xml:space="preserve">
    <value>Participants</value>
  </data>
  <data name="PhoneLabel.Text" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="PresenterLabel.Text" xml:space="preserve">
    <value>Deaf Presenter</value>
  </data>
  <data name="Psychiatric.Text" xml:space="preserve">
    <value>Psychiatric</value>
  </data>
  <data name="RecurringEventLabel.Text" xml:space="preserve">
    <value>Recurring Event</value>
  </data>
  <data name="Registration Options:.Text" xml:space="preserve">
    <value>Registration Options:</value>
  </data>
  <data name="RegistrationLimitLabel.Text" xml:space="preserve">
    <value>Maximum Number of Registrants</value>
  </data>
  <data name="Religious.Text" xml:space="preserve">
    <value>Religious</value>
  </data>
  <data name="Required Label.Text" xml:space="preserve">
    <value>*</value>
  </data>
  <data name="Save.Alt" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SaveAndCreateNew.Alt" xml:space="preserve">
    <value>Save and Create New</value>
  </data>
  <data name="Seminar.Text" xml:space="preserve">
    <value>Seminar</value>
  </data>
  <data name="Service Request Form.Text" xml:space="preserve">
    <value>Service Request Form</value>
  </data>
  <data name="StartDateTimePickerRequired.Text" xml:space="preserve">
    <value>You must specify when your event begins</value>
  </data>
  <data name="StartLabel.Text" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="StreetLabel.Text" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="Theatrical.Text" xml:space="preserve">
    <value>Theatrical</value>
  </data>
  <data name="TitleLabel.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="TotalNumberLabel.Text" xml:space="preserve">
    <value>Total Number of Participants</value>
  </data>
</root>